syntax = "proto3";

package blockchain;

option go_package = "github.com/layla-lili/blockchain_tools/pkg/api";

// BlockchainService defines the gRPC service for blockchain operations
service BlockchainService {
    // Account operations
    rpc GetAccount (GetAccountRequest) returns (Account);
    rpc GetBalance (GetBalanceRequest) returns (Balance);
    rpc ListAccounts (ListAccountsRequest) returns (ListAccountsResponse);

    // Block operations
    rpc GetBlock (GetBlockRequest) returns (Block);
    rpc GetBlockByHash (GetBlockByHashRequest) returns (Block);
    rpc GetBlockByNumber (GetBlockByNumberRequest) returns (Block);

    // Transaction operations
    rpc SendTransaction (Transaction) returns (TransactionResponse);
    rpc GetTransaction (GetTransactionRequest) returns (Transaction);

    // Node operations
    rpc GetNodeInfo (NodeInfoRequest) returns (NodeInfo);
    rpc GetPeers (GetPeersRequest) returns (PeersResponse);
}

// Message definitions
message GetAccountRequest {
    string address = 1;
}

message Account {
    string address = 1;
    string balance = 2;
    uint64 nonce = 3;
}

message GetBalanceRequest {
    string address = 1;
}

message Balance {
    string amount = 1;
}

message ListAccountsRequest {
    int32 page_size = 1;
    string page_token = 2;
}

message ListAccountsResponse {
    repeated Account accounts = 1;
    string next_page_token = 2;
}

message Block {
    string hash = 1;
    string parent_hash = 2;
    uint64 number = 3;
    uint64 timestamp = 4;
    repeated Transaction transactions = 5;
}

message GetBlockRequest {
    oneof identifier {
        string hash = 1;
        uint64 number = 2;
    }
}

message GetBlockByHashRequest {
    string hash = 1;
}

message GetBlockByNumberRequest {
    uint64 number = 1;
}

message Transaction {
    string hash = 1;
    string from = 2;
    string to = 3;
    string value = 4;
    bytes data = 5;
    uint64 nonce = 6;
    string signature = 7;
}

message TransactionResponse {
    string hash = 1;
}

message GetTransactionRequest {
    string hash = 1;
}

message NodeInfoRequest {}

message NodeInfo {
    string version = 1;
    string network = 2;
    uint64 height = 3;
    repeated string protocols = 4;
}

message GetPeersRequest {}

message PeersResponse {
    repeated Peer peers = 1;
}

message Peer {
    string id = 1;
    string address = 2;
    string version = 3;
}